{
    "version": "https://jsonfeed.org/version/1",
    "title": "xjtu-wang's blog",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2025/03/11/yolo/",
            "url": "http://example.com/2025/03/11/yolo/",
            "title": "yolo",
            "date_published": "2025-03-11T03:36:17.000Z",
            "content_html": "<h1 id=\"YOLOv8自定义数据集训练完整指南\"><a href=\"#YOLOv8自定义数据集训练完整指南\" class=\"headerlink\" title=\"YOLOv8自定义数据集训练完整指南\"></a>YOLOv8自定义数据集训练完整指南</h1><p><em>为xjtu-wang整理的学习笔记（2025年3月11日）</em></p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"#%E9%A1%B9%E7%9B%AE%E6%A6%82%E8%BF%B0\">项目概述</a></li>\n<li><a href=\"#%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84\">项目结构</a></li>\n<li><a href=\"#%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87\">数据准备</a></li>\n<li><a href=\"#%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B\">训练模型</a></li>\n<li><a href=\"#%E9%AA%8C%E8%AF%81%E6%A8%A1%E5%9E%8B\">验证模型</a></li>\n<li><a href=\"#%E8%B7%AF%E5%BE%84%E5%A4%84%E7%90%86%E8%AF%A6%E8%A7%A3\">路径处理详解</a></li>\n<li><a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B\">为什么使用预训练模型</a></li>\n<li><a href=\"#%E6%95%B0%E6%8D%AE%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7%E5%8F%8A%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5\">数据标注工具及最佳实践</a></li>\n<li><a href=\"#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E7%AD%94\">常见问题解答</a></li>\n</ol>\n<h2 id=\"项目概述\"><a href=\"#项目概述\" class=\"headerlink\" title=\"项目概述\"></a>项目概述</h2><p>YOLOv8是目前最先进的目标检测算法之一，本指南详细介绍了如何使用自定义数据集训练YOLOv8模型的完整流程，包括数据准备、模型训练和验证等环节。</p>\n<h2 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h2><p>创建一个良好的项目结构对于管理训练过程至关重要：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yolo_training/</span><br><span class=\"line\">├── dataset/                # 数据集目录</span><br><span class=\"line\">│   ├── images/             # 图片文件夹</span><br><span class=\"line\">│   │   ├── train/         </span><br><span class=\"line\">│   │   └── val/           </span><br><span class=\"line\">│   └── labels/            # 标签文件夹</span><br><span class=\"line\">│       ├── train/</span><br><span class=\"line\">│       └── val/</span><br><span class=\"line\">├── scripts/               # 脚本文件夹</span><br><span class=\"line\">│   ├── prepare_data.py    # 数据准备脚本</span><br><span class=\"line\">│   ├── train_model.py     # 训练脚本  </span><br><span class=\"line\">│   └── validate_model.py  # 验证脚本</span><br><span class=\"line\">├── models/                # 模型保存文件夹</span><br><span class=\"line\">├── data.yaml              # 数据集配置文件</span><br><span class=\"line\">└── requirements.txt       # 依赖库</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据准备\"><a href=\"#数据准备\" class=\"headerlink\" title=\"数据准备\"></a>数据准备</h2><p>数据准备是训练过程的关键一步，以下是完整的数据准备脚本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> shutil</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建必要的目录结构</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_directories</span>():</span><br><span class=\"line\">    dirs = [</span><br><span class=\"line\">        <span class=\"string\">&quot;dataset/images/train&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;dataset/images/val&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;dataset/labels/train&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;dataset/labels/val&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;models&quot;</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> directory <span class=\"keyword\">in</span> dirs:</span><br><span class=\"line\">        os.makedirs(directory, exist_ok=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;创建目录: <span class=\"subst\">&#123;directory&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从COCO数据集下载一些示例图片</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">download_sample_images</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 使用来自COCO数据集的一些示例图片URL</span></span><br><span class=\"line\">    image_urls = [</span><br><span class=\"line\">        <span class=\"string\">&quot;http://images.cocodataset.org/val2017/000000000139.jpg&quot;</span>,  <span class=\"comment\"># 人</span></span><br><span class=\"line\">        <span class=\"string\">&quot;http://images.cocodataset.org/val2017/000000000285.jpg&quot;</span>,  <span class=\"comment\"># 人和自行车</span></span><br><span class=\"line\">        <span class=\"comment\"># 更多图像...</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;下载示例图片...&quot;</span>)</span><br><span class=\"line\">    image_paths = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, url <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(tqdm(image_urls)):</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            response = requests.get(url, stream=<span class=\"literal\">True</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> response.status_code == <span class=\"number\">200</span>:</span><br><span class=\"line\">                file_name = <span class=\"string\">f&quot;image_<span class=\"subst\">&#123;i:04d&#125;</span>.jpg&quot;</span></span><br><span class=\"line\">                file_path = os.path.join(<span class=\"string\">&quot;dataset/images&quot;</span>, file_name)</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_path, <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> chunk <span class=\"keyword\">in</span> response.iter_content(<span class=\"number\">1024</span>):</span><br><span class=\"line\">                        f.write(chunk)</span><br><span class=\"line\">                        </span><br><span class=\"line\">                image_paths.append(file_path)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;下载失败: <span class=\"subst\">&#123;url&#125;</span>, 状态码: <span class=\"subst\">&#123;response.status_code&#125;</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;下载图片时出错: <span class=\"subst\">&#123;url&#125;</span>, 错误: <span class=\"subst\">&#123;<span class=\"built_in\">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> image_paths</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 为每张图片生成标签文件</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_labels</span>(<span class=\"params\">image_paths</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;生成标签文件...&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 类别映射: 0=人, 1=自行车, 2=汽车</span></span><br><span class=\"line\">    class_names = &#123;<span class=\"number\">0</span>: <span class=\"string\">&quot;person&quot;</span>, <span class=\"number\">1</span>: <span class=\"string\">&quot;bicycle&quot;</span>, <span class=\"number\">2</span>: <span class=\"string\">&quot;car&quot;</span>&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    labels = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, image_path <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(tqdm(image_paths)):</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 打开图片获取尺寸</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> Image.<span class=\"built_in\">open</span>(image_path) <span class=\"keyword\">as</span> img:</span><br><span class=\"line\">                width, height = img.size</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\"># 为每个图像创建1-3个随机边界框</span></span><br><span class=\"line\">            num_boxes = random.randint(<span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">            boxes = []</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num_boxes):</span><br><span class=\"line\">                <span class=\"comment\"># 随机选择类别</span></span><br><span class=\"line\">                class_id = random.randint(<span class=\"number\">0</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\"># 生成随机边界框 (确保合理大小)</span></span><br><span class=\"line\">                box_width = random.uniform(<span class=\"number\">0.1</span>, <span class=\"number\">0.5</span>) <span class=\"comment\"># 相对宽度</span></span><br><span class=\"line\">                box_height = random.uniform(<span class=\"number\">0.1</span>, <span class=\"number\">0.5</span>) <span class=\"comment\"># 相对高度</span></span><br><span class=\"line\">                </span><br><span class=\"line\">                center_x = random.uniform(box_width/<span class=\"number\">2</span>, <span class=\"number\">1</span> - box_width/<span class=\"number\">2</span>)</span><br><span class=\"line\">                center_y = random.uniform(box_height/<span class=\"number\">2</span>, <span class=\"number\">1</span> - box_height/<span class=\"number\">2</span>)</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\"># YOLO格式: class_id center_x center_y width height</span></span><br><span class=\"line\">                box = [class_id, center_x, center_y, box_width, box_height]</span><br><span class=\"line\">                boxes.append(box)</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\"># 构建标签文件名</span></span><br><span class=\"line\">            label_file_name = os.path.basename(image_path).replace(<span class=\"string\">&#x27;.jpg&#x27;</span>, <span class=\"string\">&#x27;.txt&#x27;</span>)</span><br><span class=\"line\">            label_path = image_path.replace(<span class=\"string\">&#x27;images&#x27;</span>, <span class=\"string\">&#x27;labels&#x27;</span>).replace(<span class=\"string\">&#x27;.jpg&#x27;</span>, <span class=\"string\">&#x27;.txt&#x27;</span>)</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\"># 写入标签文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(label_path, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> box <span class=\"keyword\">in</span> boxes:</span><br><span class=\"line\">                    f.write(<span class=\"string\">f&quot;<span class=\"subst\">&#123;<span class=\"built_in\">int</span>(box[<span class=\"number\">0</span>])&#125;</span> <span class=\"subst\">&#123;box[<span class=\"number\">1</span>]:<span class=\"number\">.6</span>f&#125;</span> <span class=\"subst\">&#123;box[<span class=\"number\">2</span>]:<span class=\"number\">.6</span>f&#125;</span> <span class=\"subst\">&#123;box[<span class=\"number\">3</span>]:<span class=\"number\">.6</span>f&#125;</span> <span class=\"subst\">&#123;box[<span class=\"number\">4</span>]:<span class=\"number\">.6</span>f&#125;</span>\\n&quot;</span>)</span><br><span class=\"line\">            </span><br><span class=\"line\">            labels.append((image_path, label_path))</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;处理图片时出错 <span class=\"subst\">&#123;image_path&#125;</span>: <span class=\"subst\">&#123;<span class=\"built_in\">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> labels</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 划分数据集为训练集和验证集</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">split_dataset</span>(<span class=\"params\">labels, train_ratio=<span class=\"number\">0.8</span></span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;划分训练集和验证集...&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 随机打乱数据</span></span><br><span class=\"line\">    random.shuffle(labels)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 计算训练集大小</span></span><br><span class=\"line\">    train_size = <span class=\"built_in\">int</span>(<span class=\"built_in\">len</span>(labels) * train_ratio)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 划分数据</span></span><br><span class=\"line\">    train_labels = labels[:train_size]</span><br><span class=\"line\">    val_labels = labels[train_size:]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 移动文件到相应目录</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> images_path, labels_path <span class=\"keyword\">in</span> tqdm(train_labels):</span><br><span class=\"line\">        <span class=\"comment\"># 目标路径</span></span><br><span class=\"line\">        dest_img = images_path.replace(<span class=\"string\">&#x27;images/&#x27;</span>, <span class=\"string\">&#x27;images/train/&#x27;</span>)</span><br><span class=\"line\">        dest_label = labels_path.replace(<span class=\"string\">&#x27;labels/&#x27;</span>, <span class=\"string\">&#x27;labels/train/&#x27;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 确保目标目录存在</span></span><br><span class=\"line\">        os.makedirs(os.path.dirname(dest_img), exist_ok=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        os.makedirs(os.path.dirname(dest_label), exist_ok=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 移动文件</span></span><br><span class=\"line\">        shutil.move(images_path, dest_img)</span><br><span class=\"line\">        shutil.move(labels_path, dest_label)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> images_path, labels_path <span class=\"keyword\">in</span> tqdm(val_labels):</span><br><span class=\"line\">        <span class=\"comment\"># 目标路径</span></span><br><span class=\"line\">        dest_img = images_path.replace(<span class=\"string\">&#x27;images/&#x27;</span>, <span class=\"string\">&#x27;images/val/&#x27;</span>)</span><br><span class=\"line\">        dest_label = labels_path.replace(<span class=\"string\">&#x27;labels/&#x27;</span>, <span class=\"string\">&#x27;labels/val/&#x27;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 确保目标目录存在</span></span><br><span class=\"line\">        os.makedirs(os.path.dirname(dest_img), exist_ok=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        os.makedirs(os.path.dirname(dest_label), exist_ok=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 移动文件</span></span><br><span class=\"line\">        shutil.move(images_path, dest_img)</span><br><span class=\"line\">        shutil.move(labels_path, dest_label)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(train_labels), <span class=\"built_in\">len</span>(val_labels)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建数据集配置文件</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_yaml_config</span>(<span class=\"params\">train_count, val_count</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;创建数据集配置文件...&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 确定绝对路径</span></span><br><span class=\"line\">    current_dir = os.getcwd()</span><br><span class=\"line\">    dataset_dir = os.path.join(current_dir, <span class=\"string\">&#x27;dataset&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 配置数据</span></span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;path&#x27;</span>: dataset_dir,  <span class=\"comment\"># 数据集根目录的绝对路径</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;train&#x27;</span>: os.path.join(dataset_dir, <span class=\"string\">&#x27;images/train&#x27;</span>),  <span class=\"comment\"># 训练图像的绝对路径</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;val&#x27;</span>: os.path.join(dataset_dir, <span class=\"string\">&#x27;images/val&#x27;</span>),      <span class=\"comment\"># 验证图像的绝对路径</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;names&#x27;</span>: &#123;</span><br><span class=\"line\">            <span class=\"number\">0</span>: <span class=\"string\">&#x27;person&#x27;</span>,</span><br><span class=\"line\">            <span class=\"number\">1</span>: <span class=\"string\">&#x27;bicycle&#x27;</span>,</span><br><span class=\"line\">            <span class=\"number\">2</span>: <span class=\"string\">&#x27;car&#x27;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&#x27;nc&#x27;</span>: <span class=\"number\">3</span>  <span class=\"comment\"># 类别数量</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 保存到YAML文件</span></span><br><span class=\"line\">    yaml_path = os.path.join(current_dir, <span class=\"string\">&#x27;data.yaml&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(yaml_path, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        yaml.dump(data, f, default_flow_style=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;配置文件已保存到: <span class=\"subst\">&#123;yaml_path&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 主函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;开始准备YOLOv8训练数据集...&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 创建目录结构</span></span><br><span class=\"line\">    create_directories()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 下载样本图片</span></span><br><span class=\"line\">    image_paths = download_sample_images()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;下载了 <span class=\"subst\">&#123;<span class=\"built_in\">len</span>(image_paths)&#125;</span> 张图片&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 创建标签</span></span><br><span class=\"line\">    labels = create_labels(image_paths)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;生成了 <span class=\"subst\">&#123;<span class=\"built_in\">len</span>(labels)&#125;</span> 个标签文件&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 划分数据集</span></span><br><span class=\"line\">    train_count, val_count = split_dataset(labels)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;数据集划分完成: <span class=\"subst\">&#123;train_count&#125;</span> 训练样本, <span class=\"subst\">&#123;val_count&#125;</span> 验证样本&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 创建配置文件</span></span><br><span class=\"line\">    create_yaml_config(train_count, val_count)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;数据集准备完成!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"训练模型\"><a href=\"#训练模型\" class=\"headerlink\" title=\"训练模型\"></a>训练模型</h2><p>在准备好数据后，使用以下脚本进行模型训练：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"><span class=\"keyword\">from</span> ultralytics <span class=\"keyword\">import</span> YOLO</span><br><span class=\"line\"><span class=\"keyword\">import</span> yaml</span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">parse_args</span>():</span><br><span class=\"line\">    parser = argparse.ArgumentParser(description=<span class=\"string\">&quot;YOLOv8模型训练脚本&quot;</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">&#x27;--data&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>, default=<span class=\"string\">&#x27;data.yaml&#x27;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;数据配置文件路径&#x27;</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">&#x27;--epochs&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>, default=<span class=\"number\">10</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;训练轮数&#x27;</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">&#x27;--batch-size&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>, default=<span class=\"number\">8</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;批次大小&#x27;</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">&#x27;--img-size&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>, default=<span class=\"number\">640</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;图片大小&#x27;</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">&#x27;--model&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>, default=<span class=\"string\">&#x27;yolov8n.pt&#x27;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;模型类型 (yolov8n.pt, yolov8s.pt, yolov8m.pt)&#x27;</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">&#x27;--name&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>, default=<span class=\"string\">f&#x27;run_<span class=\"subst\">&#123;datetime.now().strftime(<span class=\"string\">&quot;%Y%m%d_%H%M%S&quot;</span>)&#125;</span>&#x27;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;运行名称&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> parser.parse_args()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">train_model</span>(<span class=\"params\">args</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 获取当前工作目录</span></span><br><span class=\"line\">    current_dir = os.getcwd()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 确保模型目录存在</span></span><br><span class=\"line\">    models_dir = os.path.join(current_dir, <span class=\"string\">&#x27;models&#x27;</span>)</span><br><span class=\"line\">    os.makedirs(models_dir, exist_ok=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 加载数据配置</span></span><br><span class=\"line\">    data_config_path = os.path.join(current_dir, args.data)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 检查配置文件存在</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(data_config_path):</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> FileNotFoundError(<span class=\"string\">f&quot;数据配置文件未找到: <span class=\"subst\">&#123;data_config_path&#125;</span>&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 加载YOLO模型</span></span><br><span class=\"line\">    model = YOLO(args.model)  <span class=\"comment\"># 从预训练模型开始</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 打印训练信息</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&quot;</span> * <span class=\"number\">50</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;YOLOv8 训练配置:&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;模型: <span class=\"subst\">&#123;args.model&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;数据配置: <span class=\"subst\">&#123;data_config_path&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;训练轮数: <span class=\"subst\">&#123;args.epochs&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;批次大小: <span class=\"subst\">&#123;args.batch_size&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;图片大小: <span class=\"subst\">&#123;args.img_size&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;运行名称: <span class=\"subst\">&#123;args.name&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&quot;</span> * <span class=\"number\">50</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 开始训练</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n开始训练...&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        results = model.train(</span><br><span class=\"line\">            data=data_config_path,</span><br><span class=\"line\">            epochs=args.epochs,</span><br><span class=\"line\">            imgsz=args.img_size,</span><br><span class=\"line\">            batch=args.batch_size,</span><br><span class=\"line\">            name=args.name,</span><br><span class=\"line\">            project=models_dir</span><br><span class=\"line\">        )</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 打印训练结果摘要</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n训练完成!&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;模型已保存到: <span class=\"subst\">&#123;os.path.join(models_dir, args.name)&#125;</span>&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 返回结果路径以便后续验证</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> os.path.join(models_dir, args.name, <span class=\"string\">&#x27;weights&#x27;</span>, <span class=\"string\">&#x27;best.pt&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;训练过程中出错: <span class=\"subst\">&#123;<span class=\"built_in\">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 解析命令行参数</span></span><br><span class=\"line\">    args = parse_args()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 训练模型</span></span><br><span class=\"line\">    best_model_path = train_model(args)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> best_model_path:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;训练完成! 最佳模型保存在: <span class=\"subst\">&#123;best_model_path&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;训练未成功完成。&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"验证模型\"><a href=\"#验证模型\" class=\"headerlink\" title=\"验证模型\"></a>验证模型</h2><p>训练完成后，使用以下脚本验证模型性能：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"><span class=\"keyword\">from</span> ultralytics <span class=\"keyword\">import</span> YOLO</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> glob</span><br><span class=\"line\"><span class=\"keyword\">import</span> yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">parse_args</span>():</span><br><span class=\"line\">    parser = argparse.ArgumentParser(description=<span class=\"string\">&quot;YOLOv8模型验证脚本&quot;</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">&#x27;--model&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>, required=<span class=\"literal\">True</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;训练好的模型路径&#x27;</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">&#x27;--data&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>, default=<span class=\"string\">&#x27;data.yaml&#x27;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;数据配置文件路径&#x27;</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">&#x27;--conf&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">float</span>, default=<span class=\"number\">0.25</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;置信度阈值&#x27;</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">&#x27;--iou&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">float</span>, default=<span class=\"number\">0.45</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;NMS的IoU阈值</span></span><br><span class=\"line\"><span class=\"string\">    Here&#x27;</span>s the rest of the markdown document summarizing our discussion:</span><br><span class=\"line\"></span><br><span class=\"line\">```python</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">parse_args</span>():</span><br><span class=\"line\">    parser = argparse.ArgumentParser(description=<span class=\"string\">&quot;YOLOv8模型验证脚本&quot;</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">&#x27;--model&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>, required=<span class=\"literal\">True</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;训练好的模型路径&#x27;</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">&#x27;--data&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>, default=<span class=\"string\">&#x27;data.yaml&#x27;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;数据配置文件路径&#x27;</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">&#x27;--conf&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">float</span>, default=<span class=\"number\">0.25</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;置信度阈值&#x27;</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">&#x27;--iou&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">float</span>, default=<span class=\"number\">0.45</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;NMS的IoU阈值&#x27;</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">&#x27;--image&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;单张测试图片路径&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> parser.parse_args()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">validate_model</span>(<span class=\"params\">model_path, data_path, conf, iou</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 加载模型</span></span><br><span class=\"line\">    model = YOLO(model_path)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 运行验证</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;使用数据集 <span class=\"subst\">&#123;data_path&#125;</span> 验证模型 <span class=\"subst\">&#123;model_path&#125;</span>...&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        results = model.val(data=data_path, conf=conf, iou=iou)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 打印验证结果摘要</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n验证结果摘要:&quot;</span>)</span><br><span class=\"line\">        metrics = results.box</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;mAP50: <span class=\"subst\">&#123;metrics.map50:<span class=\"number\">.4</span>f&#125;</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;mAP50-95: <span class=\"subst\">&#123;metrics.<span class=\"built_in\">map</span>:<span class=\"number\">.4</span>f&#125;</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;精确度 (Precision): <span class=\"subst\">&#123;metrics.p:<span class=\"number\">.4</span>f&#125;</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;召回率 (Recall): <span class=\"subst\">&#123;metrics.r:<span class=\"number\">.4</span>f&#125;</span>&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;验证过程中出错: <span class=\"subst\">&#123;<span class=\"built_in\">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_on_image</span>(<span class=\"params\">model_path, image_path, conf, iou</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(image_path):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;错误: 图片文件 <span class=\"subst\">&#123;image_path&#125;</span> 不存在&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 加载模型</span></span><br><span class=\"line\">    model = YOLO(model_path)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 加载类别名称</span></span><br><span class=\"line\">    data_yaml = os.path.join(os.getcwd(), <span class=\"string\">&#x27;data.yaml&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> os.path.exists(data_yaml):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(data_yaml, <span class=\"string\">&#x27;r&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            data_dict = yaml.safe_load(f)</span><br><span class=\"line\">            class_names = data_dict.get(<span class=\"string\">&#x27;names&#x27;</span>, &#123;&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        class_names = &#123;<span class=\"number\">0</span>: <span class=\"string\">&#x27;person&#x27;</span>, <span class=\"number\">1</span>: <span class=\"string\">&#x27;bicycle&#x27;</span>, <span class=\"number\">2</span>: <span class=\"string\">&#x27;car&#x27;</span>&#125;  <span class=\"comment\"># 默认类别</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 在图片上进行预测</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;对图片 <span class=\"subst\">&#123;image_path&#125;</span> 进行预测...&quot;</span>)</span><br><span class=\"line\">    results = model.predict(image_path, conf=conf, iou=iou)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 处理结果</span></span><br><span class=\"line\">    result = results[<span class=\"number\">0</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 获取边界框、置信度和类别</span></span><br><span class=\"line\">    boxes = result.boxes</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(boxes) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;未检测到任何对象&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;检测到 <span class=\"subst\">&#123;<span class=\"built_in\">len</span>(boxes)&#125;</span> 个对象:&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 读取原始图像</span></span><br><span class=\"line\">        img = cv2.imread(image_path)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 可视化检测结果</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> box <span class=\"keyword\">in</span> boxes:</span><br><span class=\"line\">            <span class=\"comment\"># 获取边界框坐标</span></span><br><span class=\"line\">            x1, y1, x2, y2 = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, box.xyxy[<span class=\"number\">0</span>].tolist())</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\"># 获取置信度和类别ID</span></span><br><span class=\"line\">            conf = <span class=\"built_in\">float</span>(box.conf[<span class=\"number\">0</span>])</span><br><span class=\"line\">            cls_id = <span class=\"built_in\">int</span>(box.cls[<span class=\"number\">0</span>])</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\"># 获取类别名称</span></span><br><span class=\"line\">            cls_name = class_names.get(cls_id, <span class=\"string\">f&quot;类别<span class=\"subst\">&#123;cls_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\"># 在控制台输出信息</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;类别: <span class=\"subst\">&#123;cls_name&#125;</span>, 置信度: <span class=\"subst\">&#123;conf:<span class=\"number\">.2</span>f&#125;</span>, 边界框: [<span class=\"subst\">&#123;x1&#125;</span>, <span class=\"subst\">&#123;y1&#125;</span>, <span class=\"subst\">&#123;x2&#125;</span>, <span class=\"subst\">&#123;y2&#125;</span>]&quot;</span>)</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\"># 在图像上绘制边界框</span></span><br><span class=\"line\">            color = (<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>)  <span class=\"comment\"># 绿色边界框</span></span><br><span class=\"line\">            cv2.rectangle(img, (x1, y1), (x2, y2), color, <span class=\"number\">2</span>)</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\"># 添加标签</span></span><br><span class=\"line\">            label = <span class=\"string\">f&quot;<span class=\"subst\">&#123;cls_name&#125;</span> <span class=\"subst\">&#123;conf:<span class=\"number\">.2</span>f&#125;</span>&quot;</span></span><br><span class=\"line\">            cv2.putText(img, label, (x1, y1 - <span class=\"number\">10</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class=\"number\">0.5</span>, color, <span class=\"number\">2</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 保存结果图像</span></span><br><span class=\"line\">        save_path = <span class=\"string\">f&quot;results_<span class=\"subst\">&#123;os.path.basename(image_path)&#125;</span>&quot;</span></span><br><span class=\"line\">        cv2.imwrite(save_path, img)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;已将检测结果保存到: <span class=\"subst\">&#123;save_path&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 解析命令行参数</span></span><br><span class=\"line\">    args = parse_args()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 确保模型存在</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(args.model):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;错误: 模型文件 <span class=\"subst\">&#123;args.model&#125;</span> 不存在&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 确保数据配置存在</span></span><br><span class=\"line\">    data_path = os.path.join(os.getcwd(), args.data)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(data_path):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;警告: 数据配置文件 <span class=\"subst\">&#123;data_path&#125;</span> 不存在&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 验证模型 (在整个验证集上)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> os.path.exists(data_path):</span><br><span class=\"line\">        validate_model(args.model, data_path, args.conf, args.iou)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 如果提供了图片，则在单张图片上进行测试</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.image:</span><br><span class=\"line\">        test_on_image(args.model, args.image, args.conf, args.iou)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"路径处理详解\"><a href=\"#路径处理详解\" class=\"headerlink\" title=\"路径处理详解\"></a>路径处理详解</h2><p>在Python开发中，特别是处理文件和目录时，正确理解和处理路径是关键。</p>\n<h3 id=\"相对路径与绝对路径\"><a href=\"#相对路径与绝对路径\" class=\"headerlink\" title=\"相对路径与绝对路径\"></a>相对路径与绝对路径</h3><p><strong>绝对路径</strong>：</p>\n<ul>\n<li>从文件系统根目录开始的完整路径</li>\n<li>例如：<code>/mnt/workspace/yolo_project/data.yaml</code></li>\n<li>优点：明确、不受工作目录影响</li>\n<li>缺点：不可移植，在不同环境中可能失效</li>\n</ul>\n<p><strong>相对路径</strong>：</p>\n<ul>\n<li>相对于当前工作目录的路径</li>\n<li>例如：<code>./data.yaml</code>或<code>data.yaml</code>（当前目录），<code>../data</code>（上级目录）</li>\n<li>优点：更简洁，有可移植性</li>\n<li>缺点：依赖于运行时的工作目录，容易造成混淆</li>\n</ul>\n<h3 id=\"正确的路径处理方式\"><a href=\"#正确的路径处理方式\" class=\"headerlink\" title=\"正确的路径处理方式\"></a>正确的路径处理方式</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. 获取脚本所在目录（推荐）</span></span><br><span class=\"line\">script_path = os.path.abspath(__file__)</span><br><span class=\"line\">script_dir = os.path.dirname(script_path)</span><br><span class=\"line\">data_file = os.path.join(script_dir, <span class=\"string\">&quot;data.yaml&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 获取当前工作目录</span></span><br><span class=\"line\">current_dir = os.getcwd()</span><br><span class=\"line\">data_file = os.path.join(current_dir, <span class=\"string\">&quot;data.yaml&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 使用os.path.join构建路径（跨平台）</span></span><br><span class=\"line\">models_dir = os.path.join(current_dir, <span class=\"string\">&quot;models&quot;</span>, <span class=\"string\">&quot;run1&quot;</span>, <span class=\"string\">&quot;weights&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4. 确保目录存在</span></span><br><span class=\"line\">os.makedirs(models_dir, exist_ok=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"灵活路径处理实例\"><a href=\"#灵活路径处理实例\" class=\"headerlink\" title=\"灵活路径处理实例\"></a>灵活路径处理实例</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"><span class=\"keyword\">import</span> yaml</span><br><span class=\"line\"><span class=\"keyword\">from</span> ultralytics <span class=\"keyword\">import</span> YOLO</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">parse_args</span>():</span><br><span class=\"line\">    parser = argparse.ArgumentParser(description=<span class=\"string\">&quot;灵活的YOLOv8训练脚本&quot;</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">&#x27;--train-images&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>, required=<span class=\"literal\">True</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;训练图像文件夹路径&#x27;</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">&#x27;--train-labels&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>, required=<span class=\"literal\">True</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;训练标签文件夹路径&#x27;</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">&#x27;--val-images&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>, required=<span class=\"literal\">True</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;验证图像文件夹路径&#x27;</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">&#x27;--val-labels&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>, required=<span class=\"literal\">True</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;验证标签文件夹路径&#x27;</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">&#x27;--model&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>, default=<span class=\"string\">&#x27;yolov8n.pt&#x27;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;基础模型&#x27;</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">&#x27;--epochs&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>, default=<span class=\"number\">50</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;训练轮数&#x27;</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">&#x27;--output&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>, default=<span class=\"string\">&#x27;./models&#x27;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;输出目录&#x27;</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">&#x27;--classes&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>, default=<span class=\"string\">&#x27;person,bicycle,car&#x27;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;类别名称，逗号分隔&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> parser.parse_args()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    args = parse_args()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 创建临时配置文件</span></span><br><span class=\"line\">    class_names = args.classes.split(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">    classes_dict = &#123;i: name <span class=\"keyword\">for</span> i, name <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(class_names)&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    config = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;path&#x27;</span>: <span class=\"string\">&#x27;.&#x27;</span>,  <span class=\"comment\"># 这个值不重要，因为我们使用绝对路径</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;train&#x27;</span>: args.train_images,</span><br><span class=\"line\">        <span class=\"string\">&#x27;val&#x27;</span>: args.val_images,</span><br><span class=\"line\">        <span class=\"string\">&#x27;names&#x27;</span>: classes_dict,</span><br><span class=\"line\">        <span class=\"string\">&#x27;nc&#x27;</span>: <span class=\"built_in\">len</span>(class_names)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 保存临时配置</span></span><br><span class=\"line\">    config_path = os.path.join(os.getcwd(), <span class=\"string\">&#x27;temp_data_config.yaml&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(config_path, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        yaml.dump(config, f)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;创建临时数据配置: <span class=\"subst\">&#123;config_path&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;使用训练图像: <span class=\"subst\">&#123;args.train_images&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;使用验证图像: <span class=\"subst\">&#123;args.val_images&#125;</span>&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 训练模型</span></span><br><span class=\"line\">    model = YOLO(args.model)</span><br><span class=\"line\">    model.train(</span><br><span class=\"line\">        data=config_path,</span><br><span class=\"line\">        epochs=args.epochs,</span><br><span class=\"line\">        imgsz=<span class=\"number\">640</span>,</span><br><span class=\"line\">        project=args.output</span><br><span class=\"line\">    )</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;训练完成，模型保存在 <span class=\"subst\">&#123;args.output&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"为什么使用预训练模型\"><a href=\"#为什么使用预训练模型\" class=\"headerlink\" title=\"为什么使用预训练模型\"></a>为什么使用预训练模型</h2><p>预训练模型是利用迁移学习原理，能够显著提高训练效率和最终性能的关键技术。</p>\n<h3 id=\"迁移学习的优势\"><a href=\"#迁移学习的优势\" class=\"headerlink\" title=\"迁移学习的优势\"></a>迁移学习的优势</h3><ol>\n<li><strong>减少训练时间</strong>：从预训练模型开始，通常只需要几十轮(epochs)就能得到不错的效果，而从头训练可能需要几百上千轮。</li>\n<li><strong>减少数据需求</strong>：使用预训练模型时，您需要的训练数据量显著减少。</li>\n<li><strong>更好的泛化能力</strong>：预训练模型已经学习了一般性的视觉特征，这些特征对于多种目标检测任务都是有价值的。</li>\n</ol>\n<h3 id=\"特征提取的层次性\"><a href=\"#特征提取的层次性\" class=\"headerlink\" title=\"特征提取的层次性\"></a>特征提取的层次性</h3><p>深度学习模型的工作方式是层层提取特征：</p>\n<ul>\n<li><strong>底层</strong>：检测边缘、颜色和简单纹理</li>\n<li><strong>中层</strong>：组合这些特征识别形状和部分物体</li>\n<li><strong>高层</strong>：识别完整物体和场景</li>\n</ul>\n<h3 id=\"预训练模型的工作原理\"><a href=\"#预训练模型的工作原理\" class=\"headerlink\" title=\"预训练模型的工作原理\"></a>预训练模型的工作原理</h3><p>当使用YOLOv8预训练模型(如yolov8n.pt)时：</p>\n<ol>\n<li><strong>骨干网络(Backbone)重用</strong>：模型的大部分参数(特征提取网络)保持不变</li>\n<li><strong>头部网络(Head)调整</strong>：只有输出层会根据您的类别数进行调整</li>\n<li><strong>微调(Fine-tuning)</strong>：使用较小的学习率在新数据上调整整个网络</li>\n</ol>\n<h3 id=\"从头训练的情况\"><a href=\"#从头训练的情况\" class=\"headerlink\" title=\"从头训练的情况\"></a>从头训练的情况</h3><p>如果确实需要从头训练：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> ultralytics <span class=\"keyword\">import</span> YOLO</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个空模型(不加载预训练权重)</span></span><br><span class=\"line\">model = YOLO(<span class=\"string\">&#x27;yolov8n.yaml&#x27;</span>)  <span class=\"comment\"># 注意这里使用的是.yaml而不是.pt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从头开始训练</span></span><br><span class=\"line\">model.train(data=<span class=\"string\">&#x27;data.yaml&#x27;</span>, epochs=<span class=\"number\">300</span>)  <span class=\"comment\"># 通常需要更多轮次</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据标注工具及最佳实践\"><a href=\"#数据标注工具及最佳实践\" class=\"headerlink\" title=\"数据标注工具及最佳实践\"></a>数据标注工具及最佳实践</h2><p>准备高质量的标注数据对于训练成功至关重要。</p>\n<h3 id=\"推荐的标注工具\"><a href=\"#推荐的标注工具\" class=\"headerlink\" title=\"推荐的标注工具\"></a>推荐的标注工具</h3><ol>\n<li><p><strong>Roboflow</strong> - 集成化在线标注工具</p>\n<ul>\n<li>完整的数据处理工作流</li>\n<li>自动化标注功能</li>\n<li>直接导出为YOLOv8格式</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yb2JvZmxvdy5jb20v\">https://roboflow.com/</span></li>\n</ul>\n</li>\n<li><p><strong>LabelImg</strong> - 经典、轻量级标注工具</p>\n<ul>\n<li>开源免费</li>\n<li>跨平台（Windows、Mac、Linux）</li>\n<li>简单直观的界面</li>\n<li>安装：<code>pip install labelImg</code></li>\n</ul>\n</li>\n<li><p><strong>CVAT</strong> - 专业级标注平台</p>\n<ul>\n<li>强大的自动化功能</li>\n<li>支持多种标注类型</li>\n<li>AI辅助标注</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdmF0LmFpLw==\">https://cvat.ai/</span></li>\n</ul>\n</li>\n<li><p><strong>Labelbox</strong> - 企业级数据管理与标注平台</p>\n<ul>\n<li>高级数据管理功能</li>\n<li>强大的质量控制工具</li>\n<li>多人协作功能</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sYWJlbGJveC5jb20v\">https://labelbox.com/</span></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"YOLO格式标注规范\"><a href=\"#YOLO格式标注规范\" class=\"headerlink\" title=\"YOLO格式标注规范\"></a>YOLO格式标注规范</h3><p>目录结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataset/</span><br><span class=\"line\">├── images/</span><br><span class=\"line\">│   ├── train/</span><br><span class=\"line\">│   │   ├── img1.jpg</span><br><span class=\"line\">│   │   └── ...</span><br><span class=\"line\">│   └── val/</span><br><span class=\"line\">│       ├── img100.jpg</span><br><span class=\"line\">│       └── ...</span><br><span class=\"line\">└── labels/</span><br><span class=\"line\">    ├── train/</span><br><span class=\"line\">    │   ├── img1.txt</span><br><span class=\"line\">    │   └── ...</span><br><span class=\"line\">    └── val/</span><br><span class=\"line\">        ├── img100.txt</span><br><span class=\"line\">        └── ...</span><br></pre></td></tr></table></figure>\n\n<p>标签格式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;class_id&gt; &lt;center_x&gt; &lt;center_y&gt; &lt;width&gt; &lt;height&gt;</span><br></pre></td></tr></table></figure>\n\n<p>其中所有坐标都是归一化的（0-1之间的值）:</p>\n<ul>\n<li><code>class_id</code>: 类别ID（从0开始）</li>\n<li><code>center_x</code>: 边界框中心x坐标 &#x2F; 图像宽度</li>\n<li><code>center_y</code>: 边界框中心y坐标 &#x2F; 图像高度</li>\n<li><code>width</code>: 边界框宽度 &#x2F; 图像宽度</li>\n<li><code>height</code>: 边界框高度 &#x2F; 图像高度</li>\n</ul>\n<h3 id=\"标注验证工具\"><a href=\"#标注验证工具\" class=\"headerlink\" title=\"标注验证工具\"></a>标注验证工具</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> glob</span><br><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image, ImageDraw</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">validate_yolo_annotation</span>(<span class=\"params\">image_path, label_path</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;验证YOLO格式的标注文件是否正确&quot;&quot;&quot;</span></span><br><span class=\"line\">    errors = []</span><br><span class=\"line\">    warnings = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 检查图像文件</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        img = Image.<span class=\"built_in\">open</span>(image_path)</span><br><span class=\"line\">        img_width, img_height = img.size</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        errors.append(<span class=\"string\">f&quot;无法打开图像文件)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Continuing with the markdown document:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">```python</span></span><br><span class=\"line\"><span class=\"string\">def validate_yolo_annotation(image_path, label_path):</span></span><br><span class=\"line\"><span class=\"string\">    &quot;</span><span class=\"string\">&quot;&quot;</span>验证YOLO格式的标注文件是否正确<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    errors = []</span></span><br><span class=\"line\"><span class=\"string\">    warnings = []</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    # 检查图像文件</span></span><br><span class=\"line\"><span class=\"string\">    try:</span></span><br><span class=\"line\"><span class=\"string\">        img = Image.open(image_path)</span></span><br><span class=\"line\"><span class=\"string\">        img_width, img_height = img.size</span></span><br><span class=\"line\"><span class=\"string\">    except Exception as e:</span></span><br><span class=\"line\"><span class=\"string\">        errors.append(f&quot;无法打开图像文件: &#123;str(e)&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"string\">        return errors, warnings, None</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    # 检查标签文件</span></span><br><span class=\"line\"><span class=\"string\">    if not os.path.exists(label_path):</span></span><br><span class=\"line\"><span class=\"string\">        errors.append(f&quot;标签文件不存在: &#123;label_path&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"string\">        return errors, warnings, None</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    # 读取标签</span></span><br><span class=\"line\"><span class=\"string\">    try:</span></span><br><span class=\"line\"><span class=\"string\">        with open(label_path, &#x27;r&#x27;) as f:</span></span><br><span class=\"line\"><span class=\"string\">            lines = f.readlines()</span></span><br><span class=\"line\"><span class=\"string\">    except Exception as e:</span></span><br><span class=\"line\"><span class=\"string\">        errors.append(f&quot;无法读取标签文件: &#123;str(e)&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"string\">        return errors, warnings, None</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    # 验证每个边界框</span></span><br><span class=\"line\"><span class=\"string\">    boxes = []</span></span><br><span class=\"line\"><span class=\"string\">    for i, line in enumerate(lines):</span></span><br><span class=\"line\"><span class=\"string\">        line = line.strip()</span></span><br><span class=\"line\"><span class=\"string\">        if not line:</span></span><br><span class=\"line\"><span class=\"string\">            continue</span></span><br><span class=\"line\"><span class=\"string\">            </span></span><br><span class=\"line\"><span class=\"string\">        try:</span></span><br><span class=\"line\"><span class=\"string\">            parts = line.split()</span></span><br><span class=\"line\"><span class=\"string\">            if len(parts) != 5:</span></span><br><span class=\"line\"><span class=\"string\">                errors.append(f&quot;行 &#123;i+1&#125;: 需要5个值，但找到了 &#123;len(parts)&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"string\">                continue</span></span><br><span class=\"line\"><span class=\"string\">                </span></span><br><span class=\"line\"><span class=\"string\">            class_id, x_center, y_center, width, height = map(float, parts)</span></span><br><span class=\"line\"><span class=\"string\">            </span></span><br><span class=\"line\"><span class=\"string\">            # 验证类别ID</span></span><br><span class=\"line\"><span class=\"string\">            if class_id != int(class_id) or class_id &lt; 0:</span></span><br><span class=\"line\"><span class=\"string\">                errors.append(f&quot;行 &#123;i+1&#125;: 类别ID必须是非负整数，得到 &#123;class_id&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"string\">            </span></span><br><span class=\"line\"><span class=\"string\">            # 验证坐标值是否在0-1范围内</span></span><br><span class=\"line\"><span class=\"string\">            for name, value in [(&quot;x_center&quot;, x_center), (&quot;y_center&quot;, y_center), </span></span><br><span class=\"line\"><span class=\"string\">                              (&quot;width&quot;, width), (&quot;height&quot;, height)]:</span></span><br><span class=\"line\"><span class=\"string\">                if not 0 &lt;= value &lt;= 1:</span></span><br><span class=\"line\"><span class=\"string\">                    errors.append(f&quot;行 &#123;i+1&#125;: &#123;name&#125; 应该在0到1之间，得到 &#123;value&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"string\">            </span></span><br><span class=\"line\"><span class=\"string\">            # 计算实际边界框坐标</span></span><br><span class=\"line\"><span class=\"string\">            x1 = (x_center - width/2) * img_width</span></span><br><span class=\"line\"><span class=\"string\">            y1 = (y_center - height/2) * img_height</span></span><br><span class=\"line\"><span class=\"string\">            x2 = (x_center + width/2) * img_width</span></span><br><span class=\"line\"><span class=\"string\">            y2 = (y_center + height/2) * img_height</span></span><br><span class=\"line\"><span class=\"string\">            </span></span><br><span class=\"line\"><span class=\"string\">            # 检查边界框是否过小</span></span><br><span class=\"line\"><span class=\"string\">            if width * img_width &lt; 5 or height * img_height &lt; 5:</span></span><br><span class=\"line\"><span class=\"string\">                warnings.append(f&quot;行 &#123;i+1&#125;: 边界框太小 (&#123;width * img_width:.1f&#125;x&#123;height * img_height:.1f&#125;像素)&quot;)</span></span><br><span class=\"line\"><span class=\"string\">            </span></span><br><span class=\"line\"><span class=\"string\">            boxes.append((int(class_id), x1, y1, x2, y2))</span></span><br><span class=\"line\"><span class=\"string\">            </span></span><br><span class=\"line\"><span class=\"string\">        except ValueError:</span></span><br><span class=\"line\"><span class=\"string\">            errors.append(f&quot;行 &#123;i+1&#125;: 无法解析值，确保所有值都是数字&quot;)</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    if not boxes:</span></span><br><span class=\"line\"><span class=\"string\">        warnings.append(&quot;标签文件中没有边界框&quot;)</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    # 创建带标注的预览图像</span></span><br><span class=\"line\"><span class=\"string\">    preview = img.copy()</span></span><br><span class=\"line\"><span class=\"string\">    draw = ImageDraw.Draw(preview)</span></span><br><span class=\"line\"><span class=\"string\">    colors = [(255,0,0), (0,255,0), (0,0,255), (255,255,0), (255,0,255), (0,255,255)]</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    for class_id, x1, y1, x2, y2 in boxes:</span></span><br><span class=\"line\"><span class=\"string\">        color = colors[class_id % len(colors)]</span></span><br><span class=\"line\"><span class=\"string\">        draw.rectangle([x1, y1, x2, y2], outline=color, width=2)</span></span><br><span class=\"line\"><span class=\"string\">        draw.text((x1, y1-10), f&quot;ID:&#123;class_id&#125;&quot;, fill=color)</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    return errors, warnings, preview</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">def main():</span></span><br><span class=\"line\"><span class=\"string\">    parser = argparse.ArgumentParser(description=&quot;验证YOLO格式的标注&quot;)</span></span><br><span class=\"line\"><span class=\"string\">    parser.add_argument(&#x27;--images&#x27;, type=str, required=True, help=&#x27;图像目录&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">    parser.add_argument(&#x27;--labels&#x27;, type=str, required=True, help=&#x27;标签目录&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">    parser.add_argument(&#x27;--output&#x27;, type=str, default=&#x27;validation_preview&#x27;, help=&#x27;预览输出目录&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">    args = parser.parse_args()</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    # 创建输出目录</span></span><br><span class=\"line\"><span class=\"string\">    os.makedirs(args.output, exist_ok=True)</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    # 获取所有图像文件</span></span><br><span class=\"line\"><span class=\"string\">    image_extensions = [&#x27;jpg&#x27;, &#x27;jpeg&#x27;, &#x27;png&#x27;, &#x27;bmp&#x27;]</span></span><br><span class=\"line\"><span class=\"string\">    image_files = []</span></span><br><span class=\"line\"><span class=\"string\">    for ext in image_extensions:</span></span><br><span class=\"line\"><span class=\"string\">        image_files.extend(glob.glob(os.path.join(args.images, f&#x27;*.&#123;ext&#125;&#x27;)))</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    if not image_files:</span></span><br><span class=\"line\"><span class=\"string\">        print(f&quot;在 &#123;args.images&#125; 中没有找到图像文件&quot;)</span></span><br><span class=\"line\"><span class=\"string\">        return</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    print(f&quot;找到 &#123;len(image_files)&#125; 个图像文件&quot;)</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    # 验证每个图像和标签</span></span><br><span class=\"line\"><span class=\"string\">    error_count = 0</span></span><br><span class=\"line\"><span class=\"string\">    warning_count = 0</span></span><br><span class=\"line\"><span class=\"string\">    file_count = 0</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    for image_path in image_files:</span></span><br><span class=\"line\"><span class=\"string\">        file_name = os.path.basename(image_path)</span></span><br><span class=\"line\"><span class=\"string\">        file_base = os.path.splitext(file_name)[0]</span></span><br><span class=\"line\"><span class=\"string\">        label_path = os.path.join(args.labels, f&quot;&#123;file_base&#125;.txt&quot;)</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        print(f&quot;处理 &#123;file_name&#125;...&quot;, end=&quot;&quot;)</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        errors, warnings, preview = validate_yolo_annotation(image_path, label_path)</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        if errors:</span></span><br><span class=\"line\"><span class=\"string\">            print(&quot; [有错误]&quot;)</span></span><br><span class=\"line\"><span class=\"string\">            error_count += len(errors)</span></span><br><span class=\"line\"><span class=\"string\">            for error in errors:</span></span><br><span class=\"line\"><span class=\"string\">                print(f&quot;  错误: &#123;error&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"string\">        elif warnings:</span></span><br><span class=\"line\"><span class=\"string\">            print(&quot; [有警告]&quot;)</span></span><br><span class=\"line\"><span class=\"string\">            warning_count += len(warnings)</span></span><br><span class=\"line\"><span class=\"string\">            for warning in warnings:</span></span><br><span class=\"line\"><span class=\"string\">                print(f&quot;  警告: &#123;warning&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"string\">        else:</span></span><br><span class=\"line\"><span class=\"string\">            print(&quot; [通过]&quot;)</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        # 保存预览图像</span></span><br><span class=\"line\"><span class=\"string\">        if preview:</span></span><br><span class=\"line\"><span class=\"string\">            preview_path = os.path.join(args.output, f&quot;preview_&#123;file_base&#125;.jpg&quot;)</span></span><br><span class=\"line\"><span class=\"string\">            preview.save(preview_path)</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        file_count += 1</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    # 打印总结</span></span><br><span class=\"line\"><span class=\"string\">    print(&quot;\\n验证结果摘要:&quot;)</span></span><br><span class=\"line\"><span class=\"string\">    print(f&quot;验证了 &#123;file_count&#125; 个文件&quot;)</span></span><br><span class=\"line\"><span class=\"string\">    print(f&quot;发现 &#123;error_count&#125; 个错误&quot;)</span></span><br><span class=\"line\"><span class=\"string\">    print(f&quot;发现 &#123;warning_count&#125; 个警告&quot;)</span></span><br><span class=\"line\"><span class=\"string\">    print(f&quot;预览图像已保存到 &#123;args.output&#125; 目录&quot;)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">if __name__ == &quot;__main__&quot;:</span></span><br><span class=\"line\"><span class=\"string\">    main()</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见问题解答\"><a href=\"#常见问题解答\" class=\"headerlink\" title=\"常见问题解答\"></a>常见问题解答</h2><h3 id=\"1-训练过程中的问题\"><a href=\"#1-训练过程中的问题\" class=\"headerlink\" title=\"1. 训练过程中的问题\"></a>1. 训练过程中的问题</h3><p><strong>Q: 为什么需要一个特定的目录结构？</strong><br>A: YOLOv8实际上不严格要求固定的目录结构，可以通过data.yaml文件指定自定义路径。默认的目录结构只是为了简化配置。您可以使用绝对路径或符号链接来适应任意的数据组织方式。</p>\n<p><strong>Q: 模型训练时出现”CUDA out of memory”错误怎么办？</strong><br>A: 减小批次大小（batch size）或图像尺寸（img size）。例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python train_model.py --batch-size=4 --img-size=512</span><br></pre></td></tr></table></figure>\n\n<p><strong>Q: 如何让训练更快？</strong><br>A: 可以尝试以下方法：</p>\n<ul>\n<li>使用更小的模型（如yolov8n.pt而非yolov8x.pt）</li>\n<li>减少训练轮数</li>\n<li>使用更小的图像尺寸</li>\n<li>增加批次大小（如果内存允许）</li>\n</ul>\n<h3 id=\"2-路径相关问题\"><a href=\"#2-路径相关问题\" class=\"headerlink\" title=\"2. 路径相关问题\"></a>2. 路径相关问题</h3><p><strong>Q: 为什么脚本之间无法正常衔接？</strong><br>A: 主要原因是路径处理不一致。使用绝对路径或基于脚本目录的相对路径可以解决这个问题。最佳实践是使用<code>os.path.abspath(__file__)</code>获取脚本位置，然后基于此构建其他路径。</p>\n<p><strong>Q: 如何使用自定义路径训练模型？</strong><br>A: 创建一个自定义的data.yaml文件，指定绝对路径：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">path:</span> <span class=\"string\">/绝对路径/到/数据集</span>  </span><br><span class=\"line\"><span class=\"attr\">train:</span> <span class=\"string\">/绝对路径/到/训练图像</span></span><br><span class=\"line\"><span class=\"attr\">val:</span> <span class=\"string\">/绝对路径/到/验证图像</span></span><br><span class=\"line\"><span class=\"attr\">names:</span></span><br><span class=\"line\">  <span class=\"attr\">0:</span> <span class=\"string\">类别1</span></span><br><span class=\"line\">  <span class=\"attr\">1:</span> <span class=\"string\">类别2</span></span><br><span class=\"line\"><span class=\"attr\">nc:</span> <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-预训练模型相关问题\"><a href=\"#3-预训练模型相关问题\" class=\"headerlink\" title=\"3. 预训练模型相关问题\"></a>3. 预训练模型相关问题</h3><p><strong>Q: 为什么需要下载官方预训练模型？</strong><br>A: 预训练模型利用迁移学习原理，可以：</p>\n<ul>\n<li>显著减少训练时间和数据需求</li>\n<li>提高模型精度和泛化能力</li>\n<li>加快收敛速度</li>\n</ul>\n<p><strong>Q: 可以不使用预训练模型吗？</strong><br>A: 可以，但不推荐。从头训练需要：</p>\n<ul>\n<li>更多的训练数据（通常是数万张）</li>\n<li>更长的训练时间（数百轮）</li>\n<li>更精细的超参数调整</li>\n</ul>\n<p><strong>Q: 如何选择合适的预训练模型？</strong><br>A: YOLOv8提供多种大小的模型：</p>\n<ul>\n<li>yolov8n.pt：最小，最快，精度较低</li>\n<li>yolov8s.pt：小型，速度和精度平衡</li>\n<li>yolov8m.pt：中型，更高精度，速度较慢</li>\n<li>yolov8l.pt：大型，高精度，速度慢</li>\n<li>yolov8x.pt：超大，最高精度，速度最慢</li>\n</ul>\n<p>根据您的计算资源和精度要求进行选择。</p>\n<h3 id=\"4-数据标注相关问题\"><a href=\"#4-数据标注相关问题\" class=\"headerlink\" title=\"4. 数据标注相关问题\"></a>4. 数据标注相关问题</h3><p><strong>Q: 如何选择合适的标注工具？</strong><br>A: 根据项目规模和需求：</p>\n<ul>\n<li>个人项目：LabelImg简单易用</li>\n<li>小团队：Roboflow提供良好的协作功能</li>\n<li>大型项目：CVAT或Labelbox提供更完整的数据管理</li>\n</ul>\n<p><strong>Q: 标注数据需要多少张图片？</strong><br>A: 取决于任务复杂度和类别数量：</p>\n<ul>\n<li>简单场景（1-3个类别）：至少50-100张图片</li>\n<li>复杂场景（10+类别）：至少500-1000张图片<br>使用预训练模型可以显著减少所需数据量。</li>\n</ul>\n<p><strong>Q: 如何提高标注质量？</strong><br>A: 采取以下措施：</p>\n<ul>\n<li>定义清晰的标注指南</li>\n<li>多人交叉检查</li>\n<li>使用验证脚本检查格式</li>\n<li>定期审核标注质量</li>\n</ul>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>通过本指南，您已经学习了使用YOLOv8进行自定义数据集训练的完整流程。从数据准备、模型训练到验证，以及路径处理、预训练模型的使用和数据标注的最佳实践。希望这些知识能帮助您在计算机视觉项目中取得成功！</p>\n<p>记住，深度学习是一个不断实践和调整的过程。通过持续改进数据质量、调整训练参数，您将能够获得越来越好的模型性能。祝您的YOLOv8项目取得成功！</p>\n<hr>\n<p><em>本文档由xjtu-wang于2025年3月11日与GitHub Copilot对话整理而成，用于学习参考。</em></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2025/03/06/blog%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/",
            "url": "http://example.com/2025/03/06/blog%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/",
            "title": "blog搭建指南",
            "date_published": "2025-03-06T15:53:45.000Z",
            "content_html": "<p><strong>special instruction for you</strong></p>\n<h1 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h1><p>为了使用更加纯粹的linux环境，这里我们要配置WSL环境。</p>\n<h2 id=\"启用windows子系统及虚拟化\"><a href=\"#启用windows子系统及虚拟化\" class=\"headerlink\" title=\"启用windows子系统及虚拟化\"></a>启用windows子系统及虚拟化</h2><p>在下面的搜索栏里面搜索启用或关闭windows功能</p>\n<img data-src=\"/2025/03/06/blog%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/search.png\" class=\"\" title=\"wi\">\n<p>勾选“适用于Linux的Windows子系统”与 “virtual machine platform”</p>\n<img data-src=\"/2025/03/06/blog%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/function.png\" class=\"\" title=\"wi\">\n\n<p>勾选完成后重启电脑</p>\n<p>在Microsoft Store里面搜索Ubuntu,并安装</p>\n<img data-src=\"/2025/03/06/blog%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/ubuntu.png\" class=\"\" title=\"wi\">\n\n<p>安装完后打开，若出现错误代码，不要按任何按键，复制错误代码，浏览器搜索解决办法。若正常，则会提示输入用户名和密码，注意输入密码时不显示密码是正常的</p>\n<img data-src=\"/2025/03/06/blog%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/wsl.png\" class=\"\" title=\"wi\">\n\n<p>配置完成后，打开windows终端，输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl --update</span><br></pre></td></tr></table></figure>\n<p>更新完成后，wsl就配置完成了</p>\n<h2 id=\"安装git和node-js\"><a href=\"#安装git和node-js\" class=\"headerlink\" title=\"安装git和node.js\"></a>安装git和node.js</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install git</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install nodejs</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install npm</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt update</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt upgrade</span><br></pre></td></tr></table></figure>\n<p>使用sudo命令时会提示你输入密码，密码就是你创建用户时输入的密码</p>\n<p>安装完成后，输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n<p>若正常显示版本号，不报错就说明配置完成</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2025/03/05/test/",
            "url": "http://example.com/2025/03/05/test/",
            "title": "香橙派配置VNC服务器桌面(ubuntu20.04)",
            "date_published": "2025-03-05T05:15:01.000Z",
            "content_html": "<h2 id=\"1-安装x11VNC\"><a href=\"#1-安装x11VNC\" class=\"headerlink\" title=\"1. 安装x11VNC\"></a>1. 安装x11VNC</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update -y</span><br><span class=\"line\">apt-get install x11vnc -y</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-设置VNC服务器密码\"><a href=\"#2-设置VNC服务器密码\" class=\"headerlink\" title=\"2.设置VNC服务器密码\"></a>2.设置VNC服务器密码</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x11vnc -storepasswd</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-启动server\"><a href=\"#3-启动server\" class=\"headerlink\" title=\"3.启动server\"></a>3.启动server</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x11vnc -forever -shared -rfbauth ~/.vnc/passwd</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2025/03/05/hello-world/",
            "url": "http://example.com/2025/03/05/hello-world/",
            "title": "Hello World",
            "date_published": "2025-03-05T04:51:59.696Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}